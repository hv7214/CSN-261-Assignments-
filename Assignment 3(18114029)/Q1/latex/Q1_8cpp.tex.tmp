\hypertarget{Q1_8cpp}{}\section{Q1.\+cpp File Reference}
\label{Q1_8cpp}\index{Q1.\+cpp@{Q1.\+cpp}}


B\+S\+T/\+Red-\/\+Black-\/\+Tree/\+A\+VL.  


{\ttfamily \#include $<$bits/stdc++.\+h$>$}\newline
Include dependency graph for Q1.\+cpp\+:
% FIG 0
\subsection*{Classes}
\begin{DoxyCompactItemize}
\item 
class \hyperlink{classBSTnode}{B\+S\+Tnode}
\item 
class \hyperlink{classRBTnode}{R\+B\+Tnode}
\item 
class \hyperlink{classBST}{B\+ST}
\item 
class \hyperlink{classRedBlackTree}{Red\+Black\+Tree}
\end{DoxyCompactItemize}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{Q1_8cpp_a21ba6f152e05206dcfb076dd56db63f7}\label{Q1_8cpp_a21ba6f152e05206dcfb076dd56db63f7}} 
{\footnotesize template$<$class t $>$ }\\void {\bfseries Print\+All\+Paths} (t $\ast$root)
\item 
\mbox{\Hypertarget{Q1_8cpp_a431a1d87942c332c4e61eaccc00bd82c}\label{Q1_8cpp_a431a1d87942c332c4e61eaccc00bd82c}} 
{\footnotesize template$<$class t $>$ }\\void {\bfseries gotoleaf} (t $\ast$root, vector$<$ int $>$ v)
\item 
int \hyperlink{Q1_8cpp_af082905f7eac6d03e92015146bbc1925}{max} (int a, int b)
\begin{DoxyCompactList}\small\item\em This method returns maximum of two numbers. \end{DoxyCompactList}\item 
int \hyperlink{Q1_8cpp_ac8e139b97837ae8c4163cdf6ed9eb753}{height} (\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$avl\+Node)
\begin{DoxyCompactList}\small\item\em This method returns height of any node in A\+VL Tree. \end{DoxyCompactList}\item 
int \hyperlink{Q1_8cpp_a8c9560452fdf7295d0f101f61728075b}{get\+Balance} (\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$avl\+Node)
\begin{DoxyCompactList}\small\item\em This method returns the balance factor of particular node. \end{DoxyCompactList}\item 
\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$ \hyperlink{Q1_8cpp_a9c48fefc0e10e93c5b22286e11d4f838}{right\+Rotate} (\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$avl\+Node)
\begin{DoxyCompactList}\small\item\em This method performs the right rotation of nodes to make A\+VL Tree. \end{DoxyCompactList}\item 
\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$ \hyperlink{Q1_8cpp_a962c62044668cddeeae6141f76d67725}{left\+Rotate} (\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$avl\+Node)
\begin{DoxyCompactList}\small\item\em This method performs the left rotation of nodes to make A\+VL Tree. \end{DoxyCompactList}\item 
\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$ \hyperlink{Q1_8cpp_a1ecd0cd1b3b8396ac8ef6d7e6a7f9cac}{insert} (\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$avl\+Node, int data)
\begin{DoxyCompactList}\small\item\em This method inserts a node in A\+VL Tree. \end{DoxyCompactList}\item 
vector$<$ int $>$ \hyperlink{Q1_8cpp_a94a6b739ac305abfe3692abb7eb36eaa}{get\+B\+ST} (\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$bst\+Node)
\begin{DoxyCompactList}\small\item\em This method stores the \hyperlink{classBST}{B\+ST} Tree in a vector. \end{DoxyCompactList}\item 
void \hyperlink{Q1_8cpp_a07f22eed4c261b995382f51ac61e97de}{print\+A\+V\+L\+Tree} (\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$avl\+Node, int space)
\begin{DoxyCompactList}\small\item\em This method prints the A\+VL Tree with proper indentation. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{Q1_8cpp_ae66f6b31b5ad750f1fe042a706a4e3d4}\label{Q1_8cpp_ae66f6b31b5ad750f1fe042a706a4e3d4}} 
int {\bfseries main} ()
\end{DoxyCompactItemize}
\subsection*{Variables}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{Q1_8cpp_ab01909fa7f88c726fe0ba41b02047035}\label{Q1_8cpp_ab01909fa7f88c726fe0ba41b02047035}} 
vector$<$ int $>$ {\bfseries arr\+B\+ST}
\end{DoxyCompactItemize}


\subsection{Detailed Description}
B\+S\+T/\+Red-\/\+Black-\/\+Tree/\+A\+VL. 

\begin{DoxyAuthor}{Author}
Harshit Verma
\end{DoxyAuthor}
\begin{DoxyDate}{Date}
08/17/19 
\end{DoxyDate}


\subsection{Function Documentation}
\mbox{\Hypertarget{Q1_8cpp_a8c9560452fdf7295d0f101f61728075b}\label{Q1_8cpp_a8c9560452fdf7295d0f101f61728075b}} 
\index{Q1.\+cpp@{Q1.\+cpp}!get\+Balance@{get\+Balance}}
\index{get\+Balance@{get\+Balance}!Q1.\+cpp@{Q1.\+cpp}}
\subsubsection{\texorpdfstring{get\+Balance()}{getBalance()}}
{\footnotesize\ttfamily int get\+Balance (\begin{DoxyParamCaption}\item[{\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$}]{avl\+Node }\end{DoxyParamCaption})}



This method returns the balance factor of particular node. 


\begin{DoxyParams}{Parameters}
{\em avl\+Node} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
int 
\end{DoxyReturn}
\mbox{\Hypertarget{Q1_8cpp_a94a6b739ac305abfe3692abb7eb36eaa}\label{Q1_8cpp_a94a6b739ac305abfe3692abb7eb36eaa}} 
\index{Q1.\+cpp@{Q1.\+cpp}!get\+B\+ST@{get\+B\+ST}}
\index{get\+B\+ST@{get\+B\+ST}!Q1.\+cpp@{Q1.\+cpp}}
\subsubsection{\texorpdfstring{get\+B\+S\+T()}{getBST()}}
{\footnotesize\ttfamily vector$<$int$>$ get\+B\+ST (\begin{DoxyParamCaption}\item[{\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$}]{bst\+Node }\end{DoxyParamCaption})}



This method stores the \hyperlink{classBST}{B\+ST} Tree in a vector. 


\begin{DoxyParams}{Parameters}
{\em bst\+Node} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
vector$<$int$>$ 
\end{DoxyReturn}
\mbox{\Hypertarget{Q1_8cpp_ac8e139b97837ae8c4163cdf6ed9eb753}\label{Q1_8cpp_ac8e139b97837ae8c4163cdf6ed9eb753}} 
\index{Q1.\+cpp@{Q1.\+cpp}!height@{height}}
\index{height@{height}!Q1.\+cpp@{Q1.\+cpp}}
\subsubsection{\texorpdfstring{height()}{height()}}
{\footnotesize\ttfamily int height (\begin{DoxyParamCaption}\item[{\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$}]{avl\+Node }\end{DoxyParamCaption})}



This method returns height of any node in A\+VL Tree. 


\begin{DoxyParams}{Parameters}
{\em avl\+Node} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
int 
\end{DoxyReturn}
\mbox{\Hypertarget{Q1_8cpp_a1ecd0cd1b3b8396ac8ef6d7e6a7f9cac}\label{Q1_8cpp_a1ecd0cd1b3b8396ac8ef6d7e6a7f9cac}} 
\index{Q1.\+cpp@{Q1.\+cpp}!insert@{insert}}
\index{insert@{insert}!Q1.\+cpp@{Q1.\+cpp}}
\subsubsection{\texorpdfstring{insert()}{insert()}}
{\footnotesize\ttfamily \hyperlink{classBSTnode}{B\+S\+Tnode}$\ast$ insert (\begin{DoxyParamCaption}\item[{\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$}]{avl\+Node,  }\item[{int}]{data }\end{DoxyParamCaption})}



This method inserts a node in A\+VL Tree. 


\begin{DoxyParams}{Parameters}
{\em avl\+Node} & \\
\hline
{\em data} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A\+V\+L$\ast$ 
\end{DoxyReturn}
\mbox{\Hypertarget{Q1_8cpp_a962c62044668cddeeae6141f76d67725}\label{Q1_8cpp_a962c62044668cddeeae6141f76d67725}} 
\index{Q1.\+cpp@{Q1.\+cpp}!left\+Rotate@{left\+Rotate}}
\index{left\+Rotate@{left\+Rotate}!Q1.\+cpp@{Q1.\+cpp}}
\subsubsection{\texorpdfstring{left\+Rotate()}{leftRotate()}}
{\footnotesize\ttfamily \hyperlink{classBSTnode}{B\+S\+Tnode}$\ast$ left\+Rotate (\begin{DoxyParamCaption}\item[{\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$}]{avl\+Node }\end{DoxyParamCaption})}



This method performs the left rotation of nodes to make A\+VL Tree. 


\begin{DoxyParams}{Parameters}
{\em avl\+Node} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A\+V\+L$\ast$ 
\end{DoxyReturn}
\mbox{\Hypertarget{Q1_8cpp_af082905f7eac6d03e92015146bbc1925}\label{Q1_8cpp_af082905f7eac6d03e92015146bbc1925}} 
\index{Q1.\+cpp@{Q1.\+cpp}!max@{max}}
\index{max@{max}!Q1.\+cpp@{Q1.\+cpp}}
\subsubsection{\texorpdfstring{max()}{max()}}
{\footnotesize\ttfamily int max (\begin{DoxyParamCaption}\item[{int}]{a,  }\item[{int}]{b }\end{DoxyParamCaption})}



This method returns maximum of two numbers. 


\begin{DoxyParams}{Parameters}
{\em a} & \\
\hline
{\em b} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
int 
\end{DoxyReturn}
\mbox{\Hypertarget{Q1_8cpp_a07f22eed4c261b995382f51ac61e97de}\label{Q1_8cpp_a07f22eed4c261b995382f51ac61e97de}} 
\index{Q1.\+cpp@{Q1.\+cpp}!print\+A\+V\+L\+Tree@{print\+A\+V\+L\+Tree}}
\index{print\+A\+V\+L\+Tree@{print\+A\+V\+L\+Tree}!Q1.\+cpp@{Q1.\+cpp}}
\subsubsection{\texorpdfstring{print\+A\+V\+L\+Tree()}{printAVLTree()}}
{\footnotesize\ttfamily void print\+A\+V\+L\+Tree (\begin{DoxyParamCaption}\item[{\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$}]{avl\+Node,  }\item[{int}]{space }\end{DoxyParamCaption})}



This method prints the A\+VL Tree with proper indentation. 


\begin{DoxyParams}{Parameters}
{\em avl\+Node} & \\
\hline
{\em space} & \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{Q1_8cpp_a9c48fefc0e10e93c5b22286e11d4f838}\label{Q1_8cpp_a9c48fefc0e10e93c5b22286e11d4f838}} 
\index{Q1.\+cpp@{Q1.\+cpp}!right\+Rotate@{right\+Rotate}}
\index{right\+Rotate@{right\+Rotate}!Q1.\+cpp@{Q1.\+cpp}}
\subsubsection{\texorpdfstring{right\+Rotate()}{rightRotate()}}
{\footnotesize\ttfamily \hyperlink{classBSTnode}{B\+S\+Tnode}$\ast$ right\+Rotate (\begin{DoxyParamCaption}\item[{\hyperlink{classBSTnode}{B\+S\+Tnode} $\ast$}]{avl\+Node }\end{DoxyParamCaption})}



This method performs the right rotation of nodes to make A\+VL Tree. 


\begin{DoxyParams}{Parameters}
{\em avl\+Node} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A\+V\+L$\ast$ 
\end{DoxyReturn}
